package com.example;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.PublishRequest;
import com.amazonaws.services.sns.model.PublishResult;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
import org.json.JSONObject;
import org.testng.*;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static org.junit.jupiter.api.Assertions.assertAll;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;


/**
 * This class demonstrates how to send a message to an AWS SNS topic and verify
 * that it appears in a subscribed SQS queue using credentials from gimme-aws-creds.
 */
public class SimplifiedAwsSnsAndSqsTest {

    // AWS resource identifiers - replace with your actual values
    private static final String SNS_TOPIC_ARN = "YOUR_SNS_TOPIC_ARN";  // ARN of the SNS topic to publish to
    private static final String SQS_QUEUE_URL = "YOUR_SQS_QUEUE_URL";  // URL of the SQS queue to check for messages
    private static final Regions REGION = Regions.US_EAST_1;  // AWS region where your resources are located
    
    // Will hold the AWS credentials loaded from the credentials file
    private static AWSCredentials awsCredentials;
    
    /**
     * Setup method that runs once before any tests.
     * Loads AWS credentials from the credentials file generated by gimme-aws-creds.
     */
    @BeforeClass
    public static void setup() throws IOException {
        // Load AWS credentials from gimme-aws-creds output file
        awsCredentials = loadGimmeAwsCredentials();
    }
    
    /**
     * Loads AWS credentials from the credentials file generated by gimme-aws-creds.
     * This file is typically located at ~/.aws/credentials.
     * 
     * @return AWSCredentials object containing the access key and secret key
     * @throws IOException if the credentials file cannot be read or does not contain valid credentials
     */
    private static AWSCredentials loadGimmeAwsCredentials() throws IOException {
        // Default location for gimme-aws-creds output
        String credentialsFilePath = System.getProperty("user.home") + "/.aws/credentials";
        File credentialsFile = new File(credentialsFilePath);
        
        // Check if the credentials file exists
        if (!credentialsFile.exists()) {
            throw new IOException("AWS credentials file not found. Please run gimme-aws-creds first.");
        }
        
        String accessKeyId = null;
        String secretAccessKey = null;
        
        // Read credentials file to extract access key and secret key
        try (BufferedReader reader = new BufferedReader(new FileReader(credentialsFile))) {
            String line;
            boolean inDefaultProfile = false;  // Flag to track if we're in the [default] profile section
            
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                
                // Check if we're entering the [default] profile section
                if (line.equals("[default]")) {
                    inDefaultProfile = true;
                    continue;
                } else if (line.startsWith("[") && line.endsWith("]")) {
                    // We've reached a different profile section, so exit the default section
                    inDefaultProfile = false;
                    continue;
                }
                
                // Only process lines if we're in the default profile section
                if (inDefaultProfile) {
                    // Extract the access key ID
                    if (line.startsWith("aws_access_key_id")) {
                        accessKeyId = line.split("=")[1].trim();
                    } 
                    // Extract the secret access key
                    else if (line.startsWith("aws_secret_access_key")) {
                        secretAccessKey = line.split("=")[1].trim();
                    }
                }
                
                // If we've found both keys, we can stop reading the file
                if (accessKeyId != null && secretAccessKey != null) {
                    break;
                }
            }
        }
        
        // Verify that we found both keys
        if (accessKeyId == null || secretAccessKey == null) {
            throw new IOException("Could not find AWS credentials in the credentials file.");
        }
        
        // Create and return a BasicAWSCredentials object with the extracted keys
        return new BasicAWSCredentials(accessKeyId, secretAccessKey);
    }

    /**
     * Test method that demonstrates sending a message to an SNS topic and verifying
     * that it appears in a subscribed SQS queue.
     * 
     * @throws InterruptedException if the thread is interrupted while sleeping
     */
    @Test
    public void testSendMessageToSnsAndVerifyInSqs() throws InterruptedException {
        // Create a unique message ID to track the message
        // This helps us identify our specific message in the SQS queue
        String messageId = UUID.randomUUID().toString();
        
        // Create JSON payload for the message
        // We include a unique ID so we can identify this specific message later
        JSONObject jsonPayload = new JSONObject();
        jsonPayload.put("message", "Hello from test");
        jsonPayload.put("id", messageId);
        String message = jsonPayload.toString();

        // Initialize SNS client with gimme-aws-creds credentials
        // This client will be used to publish messages to the SNS topic
        AmazonSNS snsClient = AmazonSNSClientBuilder.standard()
                .withRegion(REGION)
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        // Publish message to SNS topic
        // The message will be delivered to all subscriptions of this topic
        PublishRequest publishRequest = new PublishRequest(SNS_TOPIC_ARN, message);
        PublishResult publishResult = snsClient.publish(publishRequest);
        
        // Log the message ID returned by SNS for debugging purposes
        System.out.println("Message published to SNS. MessageId: " + publishResult.getMessageId());

        // Initialize SQS client with gimme-aws-creds credentials
        // This client will be used to receive and delete messages from the SQS queue
        AmazonSQS sqsClient = AmazonSQSClientBuilder.standard()
                .withRegion(REGION)
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        // Wait for the message to propagate from SNS to SQS
        // This delay is necessary because message delivery is not instantaneous
        TimeUnit.SECONDS.sleep(5);

        // Check SQS queue for the message
        boolean messageFound = false;
        int maxAttempts = 5;  // Maximum number of attempts to find the message
        
        // Try multiple times to find the message, with delays between attempts
        for (int attempt = 0; attempt < maxAttempts && !messageFound; attempt++) {
            // Create a request to receive messages from the SQS queue
            // We can receive up to 10 messages at once and wait up to 5 seconds for messages
            ReceiveMessageRequest receiveRequest = new ReceiveMessageRequest(SQS_QUEUE_URL)
                    .withMaxNumberOfMessages(10)
                    .withWaitTimeSeconds(5);
            
            // Receive messages from the SQS queue
            List<Message> messages = sqsClient.receiveMessage(receiveRequest).getMessages();
            
            // Check each message to see if it contains our unique message ID
            for (Message sqsMessage : messages) {
                String body = sqsMessage.getBody();
                System.out.println("Received message: " + body);
                
                // When a message is sent from SNS to SQS, SNS wraps the original message
                // in additional JSON with metadata. We just need to check if our message ID
                // is contained somewhere in this wrapped message.
                if (body.contains(messageId)) {
                    messageFound = true;
                    
                    // Delete the message from the queue after verification
                    // This is important to prevent the message from being processed again
                    sqsClient.deleteMessage(SQS_QUEUE_URL, sqsMessage.getReceiptHandle());
                    break;
                }
            }
            
            // If we haven't found the message yet, wait before trying again
            if (!messageFound) {
                System.out.println("Message not found, waiting before next attempt...");
                TimeUnit.SECONDS.sleep(2);
            }
        }

        // Assert that the message was found in the SQS queue
        // This will cause the test to fail if the message was not found
        
        
        Assert.assertTrue(messageFound);
    }
}