package com.example.one;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * Utility class for loading AWS credentials from the credentials file
 * generated by gimme-aws-creds.
 */
public class AwsCredentialsManager {
    
    /**
     * Loads AWS credentials from the credentials file generated by gimme-aws-creds.
     * This file is typically located at ~/.aws/credentials.
     * 
     * @return AWSCredentials object containing the access key ID and secret access key
     * @throws IOException if the credentials file cannot be read or does not contain valid credentials
     */
    public static AWSCredentials loadGimmeAwsCredentials() throws IOException {
        // Default location for gimme-aws-creds output
        String credentialsFilePath = System.getProperty("user.home") + "/.aws/credentials";
        File credentialsFile = new File(credentialsFilePath);
        
        // Check if the credentials file exists
        if (!credentialsFile.exists()) {
            throw new IOException("AWS credentials file not found. Please run gimme-aws-creds first.");
        }
        
        String accessKeyId = null;
        String secretAccessKey = null;
        
        // Read the credentials file line by line
        try (BufferedReader reader = new BufferedReader(new FileReader(credentialsFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // Look for the access key ID and secret access key
                if (line.trim().startsWith("aws_access_key_id")) {
                    accessKeyId = line.split("=")[1].trim();
                } else if (line.trim().startsWith("aws_secret_access_key")) {
                    secretAccessKey = line.split("=")[1].trim();
                }
                
                // If we have both keys, we can stop reading the file
                if (accessKeyId != null && secretAccessKey != null) {
                    break;
                }
            }
        }
        
        // Check if we found both keys
        if (accessKeyId == null || secretAccessKey == null) {
            throw new IOException("AWS credentials file does not contain valid credentials.");
        }
        
        // Create and return a BasicAWSCredentials object with the extracted keys
        return new BasicAWSCredentials(accessKeyId, secretAccessKey);
    }
}